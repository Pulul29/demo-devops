# Definición del pipeline de integración continua y entrega continua para el servicio demo-devops desarrollado en SpringBoot
#
# Autor: Paúl Aluisa <psaluisa@outlook.com>
# Versión: 1.0
# Fecha de creación: 27 de abril de 2023
#

# Declaración del trigger para el pipeline
trigger:
- master

# Declaración de variables para el pipeline
variables:
  sonar.projectKey: 'psaluisa_Demo-DevOps' # Key del Proyecto de Sonar Cloud para revisión de código estático
  sonar.projectName: 'Demo-DevOps' # Nombre del Proyecto de Sonar Cloud para revisión de código estático
  docker.repository: 'paulngt2/demo-devops' # Nombre del repositorio en el que se subirá la imagen generada
  deployment.file: '03-deployment.yaml' # Archivo de creación del deployment en kubernetes para la inclusión del tag de imagen generado
  deployment.folder.test: 'deployment-test' # Carpeta de archivos yaml con los recursos que se desplegaran en el cluster gke  
  deployment.folder.prod: 'deployment' # Carpeta de archivos yaml con los recursos que se desplegaran en el cluster gke  
  kubernetes.namespace.test: 'demo-devops-test' # Namespace del cluter kubernetes para el despliegue en el ambiente de test
  kubernetes.namespace.prod: 'demo-devops' # Namespace del cluter kubernetes para el despliegue en el ambiente de producción    

stages:
  # Stage de Build para la entrega de la imagen de la aplicación  
- stage: Build
  pool: default # Pool de recursos para ejecución, contiene el recurso on-Premise para la ejecución de comandos
  jobs:
    # Job para compilar, pruebas unitarias, analis de código estático, cobertura de código y generación de .jar 
    - job: Build_Jar
      displayName: 'Generar JAR Aplicación'
      steps:
        # Task de checkout del código fuente desde el repositorio
      - checkout: self
        fetchDepth: 0
        # Task para configurar el análisis de código estático con sonar cloud 
      - task: SonarCloudPrepare@1
        displayName: 'Preparar Configuración Sonar Cloud'
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'psaluisa'
          scannerMode: 'Other'
          extraProperties: |
            sonar.projectKey=$(sonar.projectKey)
            sonar.projectName=$(sonar.projectName)
        # Task de ejecución de comandos maven en el que se compila, pruebas unitarias y se ejecuta análisis de código.
      - task: Maven@3
        displayName: 'Build de Aplicación (Test y Cobertura)'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'test' # Goal definido para compilar, ejecutar pruebas unitarias y generar .jar
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          codeCoverageToolOption: 'JaCoCo'  # Definición de herramienta para reporte de cobertura de código
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          mavenVersionOption: 'Default'
          mavenOptions: '-Xmx3072m'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: true
          sqMavenPluginVersionChoice: 'latest'
        
        # Task para la publicación de resultados del análisis de sonar cloud
      - task: SonarCloudPublish@1
        displayName: 'Publicar Resultados Análisi Sonar Cloud'
        inputs:
          pollingTimeoutSec: '300'
    
    # Job para generar y publicar la imagen de docker con el .jar generado
    - job: Build_Image
      displayName: 'Generar Imagen APP'
      dependsOn: Build_Jar
      condition: succeeded() # Se ejecuta este trabajo solo si el trabajo de compilación es exitoso
      steps:
        # Task para evitar hacer nuevamente checkout del código
      - checkout: none
        # Task para build de la imagen docker en base al Dockerfile del repo
      - task: Docker@2
        displayName: 'Build Imagen Docker'
        inputs:
          containerRegistry: 'Docker Hub'
          repository: '$(docker.repository)'
          command: 'build'
          Dockerfile: '**/Dockerfile'
          tags: $(Build.BuildId)

        # Task para subir la imagen al repositorio de Doker Hub
      - task: Docker@2
        displayName: 'Push Imagen Docker'
        inputs:
          containerRegistry: 'Docker Hub'
          repository: '$(docker.repository)'
          command: 'push'
          tags: $(Build.BuildId)
      
  # Stage de Deploy Test en el que se realiza el despliege o actualización de recursos en el cluster GKE luego de la generación de la nueva imagen
- stage: Deploy_Test
  pool: default
  jobs:
    - job: Deploy_GKE
      displayName: 'Desplegar App en Cluster GKE'
      steps:
        # Task para evitar hacer nuevamente checkout del código
      - checkout: none
      # Task para ejecutar el comando que modifique el archivo de deployment de kubernetes que debe contener el nuevo tag de la imagen generada.
      - task: PowerShell@2
        displayName: 'Definir Tag Imagen en Deployment Test'
        inputs:
          targetType: 'inline'
          script: '(Get-Content ./$(deployment.folder.test)/$(deployment.file)).replace(''["tag"]'', ''$(Build.BuildId)'') | Set-Content ./$(deployment.folder.test)/$(deployment.file)'   
        # Task para la ejecutar comando kubernetes y crear o actualizar los recursos en el cluster en base a los archivos yaml de la carpeta de deployment
      - task: Kubernetes@1
        displayName: 'Crear Pods'
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'GKE'
          namespace: '$(kubernetes.namespace.test)' # Establece el namespace de los recursos
          command: 'apply'
          useConfigurationFile: true
          configuration: './$(deployment.folder.test)/.' # Establece la carpeta donde se encuentran los archivos yaml de despliegue. 
          secretType: 'generic'
      # Job para Solicitar aprobación previo al paso al stage de producción
    - job: Esperar_Aprobracion
      displayName: 'Esperar Aprobación del Usuario' 
      pool: default    
      timeoutInMinutes: 4320 # job times out en 3 días
      steps: 
        - checkout: none  
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out en 1 día
          inputs:
            notifyUsers: 'psaluisa@outlook.com'
            instructions: 'Please validate the build configuration and resume'

  # Stage de Deploy Producción en el que se realiza el despliege o actualización de recursos en el cluster GKE luego de la aprobación de la fase de Test
- stage: Deploy_Prod
  pool: default
  jobs:
    - job: Deploy_GKE
      displayName: 'Desplegar App en Cluster GKE'
      steps:
        # Task para evitar hacer nuevamente checkout del código
      - checkout: none
      # Task para ejecutar el comando que modifique el archivo de deployment de kubernetes que debe contener el nuevo tag de la imagen generada.
      - task: PowerShell@2
        displayName: 'Definir Tag Imagen en Deployment Producción'
        inputs:
          targetType: 'inline'
          script: '(Get-Content ./$(deployment.folder.prod)/$(deployment.file)).replace(''["tag"]'', ''$(Build.BuildId)'') | Set-Content ./$(deployment.folder.prod)/$(deployment.file)'
        # Task para la ejecutar comando kubernetes y crear o actualizar los recursos en el cluster en base a los archivos yaml de la carpeta de deployment
      - task: Kubernetes@1
        displayName: 'Crear Pods'
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'GKE'
          namespace: '$(kubernetes.namespace.prod)' # Establece el namespace de los recursos
          command: 'apply'
          useConfigurationFile: true
          configuration: './$(deployment.folder.prod)/.' # Establece la carpeta donde se encuentran los archivos yaml de despliegue. 
          secretType: 'generic'
